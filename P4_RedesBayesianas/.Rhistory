install.packages(c("bnlearn", "caret", "DAAG", "ggpubr", "reshape2", "snow", "splitstackshape", "tidyverse", "visNetwork"))
rm(list=ls())   # borrar todo lo que esté en memoria
options(encoding = "Latin1")
#Instalar librerias necesarias
if(!require(knitr)){install.packages("knitr")} #compilar en html
if(!require(rmdformats)){install.packages("rmdformats")}#compilar en html
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(DAAG)){install.packages("DAAG")}
if(!require(visNetwork)){install.packages("visNetwork")}
if(!require(splitstackshape)){install.packages("splitstackshape")}
if(!require(parallel)){install.packages("parallel")}
if(!require(snow)){install.packages("snow")}
if(!require(bnlearn)){install.packages("bnlearn")}
if(!require(scales)){install.packages("scales")}
if(!require(reshape2)){install.packages("reshape2")}
if(!require(Rgraphviz)){install.packages("Rgraphviz")}
if(!require(ggpubr)){install.packages("ggpubr")}
if(!require(caret)){install.packages("caret")}
# Cargar librerías
library(knitr)
library(rmdformats)
library(visNetwork)
set.seed(2020)
# Opciones globales
options(max.print="75")
opts_chunk$set(message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
# Cargar dataset
data(ais)
# Revisar dataset ais
#?ais
head(ais)
# Asignar a nueva variable
ais_df <- ais
colnames(ais_df)[12] <- "sexo"
colnames(ais_df)[13] <- "deporte"
head(ais_df)
# Graficar diagrama de caja
ggplot(ais_df, aes(x = deporte, y = hg, fill = deporte)) + geom_boxplot() + xlab("Deporte") + ylab("hg (g por decalitro)")
# Establecer variables booleanas
ais_df$alto_hc <- as.factor(ais$hc > median(ais$hc))
ais_df$alto_hg <- as.factor(ais$hg > median(ais$hg))
# Crear un grafo vacío
estructura <- empty.graph(c("alto_hc", "alto_hg", "deporte"))
# Establecer relaciones manualmente
modelstring(estructura) <- "[alto_hc][deporte][alto_hg|deporte:alto_hc]"
# Función para graficar la red usando el paquete visNetwork
plot.network <- function(estructura, ht = "400px"){
nodos.uniq <- unique(c(estructura$arcs[,1], estructura$arcs[,2]))
nodos <- data.frame(id = nodos.uniq,
label = nodos.uniq,
color = "coral",
shadow = TRUE)
arcos <- data.frame(from = estructura$arcs[,1],
to = estructura$arcs[,2],
arrows = "to",
smooth = TRUE,
shadow = TRUE,
color = "black")
return(visNetwork(nodos, arcos, height = ht, width = "100%"))
}
# Observar estructura
plot.network(estructura)
ais_df.sub <- ais_df[ais_df$deporte %in% c("Netball", "Tennis", "W_Polo"), c("alto_hc", "alto_hg", "deporte")]
ais_df.sub$deporte <- factor(ais_df.sub$deporte)
bn.mod <- bn.fit(estructura, data = ais_df.sub)
bn.mod
set.seed(1)
cat("P(alto nivel hemaglobina) =", cpquery(bn.mod, (alto_hg=="TRUE"), TRUE, n=1000000))
set.seed(1)
cat("P(alto nivel hemaglobina | entrena waterpolo y tiene alta tasa de hematocrito) =", cpquery(bn.mod, (alto_hg=="TRUE"), (deporte == "W_Polo" & alto_hc == "TRUE"), n=1000000))
set.seed(1)
cat("P(entrena waterpolo | alto nivel hemoglobina y tiene alta tasa de hematocrito) =", cpquery(bn.mod, (deporte=="W_Polo"), (alto_hg == "TRUE" & alto_hc == "TRUE"), n=1000000))
set.seed(1)
cat("P(alto nivel hemoglobina | entrena waterpolo) =", cpquery(bn.mod, (alto_hg=="TRUE"), (deporte == "W_Polo"),n=1000000))
# Crear un grafo vacío
estructura <- empty.graph(c("hc", "hg", "deporte"))
# Establecer relaciones manualmente
modelstring(estructura) <- "[hc][deporte][hg|deporte:hc]"
# subset y ajuste (fit)
ais_df.sub <- ais_df[ais_df$deporte %in% c("Netball", "Tennis", "W_Polo"), c("hc", "hg", "deporte")]
ais_df.sub$deporte <- factor(ais_df.sub$deporte)
bn.mod <- bn.fit(estructura, data = ais_df.sub)
bn.mod
set.seed(1)
cat("P(nivel de hemoglobina > 14 | entrena waterpolo y tasa de hematocrito > 42) =", cpquery(bn.mod, (hg > 14), (deporte == "W_Polo" & hc > 42 ),n=1000000))
# Crear un grafo vacío
estructura <- empty.graph(c("hc", "hg", "deporte", "lbm"))
# Establecer relaciones manualmente
modelstring(estructura) <- "[lbm][hc|lbm][deporte][hg|deporte:hc]"
plot.network(estructura)
# subset y ajuste (fit)
ais_df.sub <- ais_df[ais_df$deporte %in% c("Netball", "Tennis", "W_Polo"), c("hc", "hg", "deporte", "lbm")]
ais_df.sub$deporte <- factor(ais_df.sub$deporte)
bn.mod <- bn.fit(estructura, data = ais_df.sub)
bn.mod
set.seed(1)
cat("P(nivel de hemoglobina > 14 | entrena waterpolo y LBM > 65 kg) =", cpquery(bn.mod, (hg > 14), (deporte == "W_Polo" & lbm > 65 ), n=1000000))
# Aprender la estructura usando el algoritmo hill climbing y BIC
estructura <- hc(ais_df.sub, score = "bic-cg")
plot.network(estructura)
set.seed(1)
bn.mod <- bn.fit(estructura, data = ais_df.sub)
cat("P(nivel de hemoglobina > 14 | entrena waterpolo y LBM > 65 kg) =", cpquery(bn.mod, (hg > 14), (deporte == "W_Polo" & lbm > 65 ), n=1000000))
ais_df.sub <- ais_df[, c("hc", "hg", "deporte", "lbm", "rcc", "wcc", "ferr", "ht", "wt", "sexo", "ssf")]
estructura <- hc(ais_df.sub, score = "bic-cg")
bn.mod <- bn.fit(estructura, data = ais_df.sub)
plot.network(estructura, ht = "600px")
datos <- ais[,-c(6,8)] # sin bmi, pcbfat
colnames(datos)[10] <- "sexo"
colnames(datos)[11] <- "deporte"
datos$deporte <- as.character(datos$deporte)
datos$sexo <- as.character(datos$sexo)
datos <-  filter(datos, deporte %in% c("B_Ball", "Row", "T_400m"))
# discretizar
datos[,c("hc", "hg", "lbm", "rcc", "wcc", "ferr", "ht", "wt", "ssf")] <- discretize(datos[,c("hc", "hg", "lbm", "rcc", "wcc", "ferr", "ht", "wt", "ssf")])
# datos como factores
datos$deporte <- as.factor(datos$deporte)
datos$sexo <- as.factor(datos$sexo)
train <- data.frame(splitstackshape::stratified(datos,"deporte", .7,keep.rownames = TRUE))
test<- data.frame(datos[- as.numeric(train$rn),])  # Set de datos de validacion
#dim(train) #dimensiones de datos de entrenamientos
table(train$deporte)
#dim(test)#dimensiones de datos de test
table(test$deporte)
# Visualizar
figure.datos<- rbind(data.frame(Categoria=datos$deporte, Tipo="Completo"),data.frame(Categoria=train$deporte, Tipo="Entrenamiento"),data.frame(Categoria=test$deporte, Tipo="Validacion"))
pp <- ggplot(data=figure.datos, aes(x=Categoria, fill=Categoria)) +
geom_bar(aes(y = (..count..)/sum(..count..)), position="dodge") + labs(x="", y="Porcentaje")
pp + scale_y_continuous(labels = percent)+ facet_grid(~Tipo)
pp
#Configuracion para procesamiento en paralelo
# detectCores()
cl = makeCluster(3, type = "SOCK") #different type perform acording hardware
clusterSetRNGStream(cl, 25)# random seed
bootstrength<-boot.strength(
data=datos,
algorithm = "hc",R = 100, m=500, cpdag=TRUE,  cluster = cl, algorithm.args = list(score = "aic"))
stopCluster(cl)
av_net<- averaged.network(bootstrength, threshold = 0.2)
graphviz.plot(av_net, shape = "rectangle")
rm(list=ls())   # borrar todo lo que esté en memoria
options(encoding = "Latin1")
#Instalar librerias necesarias
if(!require(knitr)){install.packages("knitr")} #compilar en html
if(!require(rmdformats)){install.packages("rmdformats")}#compilar en html
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(DAAG)){install.packages("DAAG")}
if(!require(visNetwork)){install.packages("visNetwork")}
if(!require(splitstackshape)){install.packages("splitstackshape")}
if(!require(parallel)){install.packages("parallel")}
if(!require(snow)){install.packages("snow")}
if(!require(bnlearn)){install.packages("bnlearn")}
if(!require(scales)){install.packages("scales")}
if(!require(reshape2)){install.packages("reshape2")}
if(!require(Rgraphviz)){install.packages("Rgraphviz")}
if(!require(ggpubr)){install.packages("ggpubr")}
if(!require(caret)){install.packages("caret")}
# Cargar librerías
library(knitr)
library(rmdformats)
library(visNetwork)
set.seed(2020)
# Opciones globales
options(max.print="75")
opts_chunk$set(message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
rm(list=ls())   # borrar todo lo que esté en memoria
rm(list=ls())   # borrar todo lo que esté en memoria
options(encoding = "Latin1")
#Instalar librerias necesarias
if(!require(knitr)){install.packages("knitr")} #compilar en html
if(!require(rmdformats)){install.packages("rmdformats")}#compilar en html
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(DAAG)){install.packages("DAAG")}
if(!require(visNetwork)){install.packages("visNetwork")}
if(!require(splitstackshape)){install.packages("splitstackshape")}
if(!require(parallel)){install.packages("parallel")}
if(!require(snow)){install.packages("snow")}
if(!require(bnlearn)){install.packages("bnlearn")}
if(!require(scales)){install.packages("scales")}
if(!require(reshape2)){install.packages("reshape2")}
if(!require(Rgraphviz)){install.packages("Rgraphviz")}
if(!require(ggpubr)){install.packages("ggpubr")}
if(!require(caret)){install.packages("caret")}
# Cargar librerías
library(knitr)
library(rmdformats)
library(visNetwork)
set.seed(2020)
# Opciones globales
options(max.print="75")
opts_chunk$set(message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
rm(list=ls())   # borrar todo lo que esté en memoria
options(encoding = "Latin1")
#Instalar librerias necesarias
if(!require(knitr)){install.packages("knitr")} #compilar en html
if(!require(rmdformats)){install.packages("rmdformats")}#compilar en html
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(DAAG)){install.packages("DAAG")}
if(!require(visNetwork)){install.packages("visNetwork")}
if(!require(splitstackshape)){install.packages("splitstackshape")}
if(!require(parallel)){install.packages("parallel")}
if(!require(snow)){install.packages("snow")}
if(!require(bnlearn)){install.packages("bnlearn")}
if(!require(scales)){install.packages("scales")}
if(!require(reshape2)){install.packages("reshape2")}
if(!require(Rgraphviz)){install.packages("Rgraphviz")}
if(!require(ggpubr)){install.packages("ggpubr")}
if(!require(caret)){install.packages("caret")}
# Cargar librerías
library(knitr)
library(rmdformats)
library(visNetwork)
set.seed(2020)
# Opciones globales
options(max.print="75")
opts_chunk$set(message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
rm(list=ls())   # borrar todo lo que esté en memoria
options(encoding = "Latin1")
#Instalar librerias necesarias
if(!require(knitr)){install.packages("knitr")} #compilar en html
if(!require(rmdformats)){install.packages("rmdformats")}#compilar en html
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(DAAG)){install.packages("DAAG")}
if(!require(visNetwork)){install.packages("visNetwork")}
if(!require(splitstackshape)){install.packages("splitstackshape")}
if(!require(parallel)){install.packages("parallel")}
if(!require(snow)){install.packages("snow")}
if(!require(bnlearn)){install.packages("bnlearn")}
if(!require(scales)){install.packages("scales")}
if(!require(reshape2)){install.packages("reshape2")}
if(!require(Rgraphviz)){install.packages("Rgraphviz")}
if(!require(ggpubr)){install.packages("ggpubr")}
if(!require(caret)){install.packages("caret")}
# Cargar librerías
library(knitr)
library(rmdformats)
library(visNetwork)
set.seed(2020)
# Opciones globales
options(max.print="75")
opts_chunk$set(message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
